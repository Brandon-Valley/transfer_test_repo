#!/bin/sh


# For support and/or issues, email brandon.a.valley@boeing.com


# To test in Windows:
# ==================
#     make sure the path to the dir that contains your .sh.exe file is in your environment variables
#  		   if you have already downloaded git, the default location should be:  C:\Users\<USER-NAME>\AppData\Local\Programs\Git\usr\bin\
#     cd into parent directory
#     type "bash" to enter bash console
#     type "./<script_name>"
#     type "exit" to exit bash console



# When / where is this script run:
# ===============================
# All hook scripts execute starting in the repo's root directory (in the same directory that contains .git)
#
# After you run a successful git checkout, the post-checkout hook runs



# How to use Global Hook Override Files:
# =====================================
# If you are reading this, there is a good chance that you are trying to write a script to interact with Git or doing something weird 
# and this hook is getting in the way. If that is the case, then fear not!  Each main function of this hook script can be individually 
# overridden/disabled for any given repository.  
#
# If there is a main function you would like to override, this can be done by creating 
# a file with a particular name in a particular location.  All override file names and a description of what main function they will 
# disable are listed below.  As for the location, there are a few options:
#
#     1.)  If you only want these global hook functions to be disabled for your local copy of the repository in question:
#
#                   Place the Global Hook Override File(s) in the .git directory.  
#
#     2.)  If you would like to disable certain global hook functions for everyone’s copy of the repo once they pull, you can place the 
#          Global Hook Override File(s) in either:
#
#	           a.)  The root directory of the repo (in the same directory that contains .git), or 
#              
#              b.)  A directory named “GLOBAL_HOOK_OVERRIDE_FILES” in the root directory of the repo, for if you have a few Global Hook 
#                   Override Files and you don’t want to clutter up your repo’s root director  
#
# Obviously, each main function of this file exists for a reason, so please don’t disable anything unless you know what you are doing, 
# and please use the lowest level override possible.  For example, if all you want is to stop the repo’s submodules from automatically
# being updated each time you pull, instead of using "GLOBAL_HOOK_OVERRIDE__POST_CHECKOUT” (which would override everything in this file),
# it would be better to use “GLOBAL_HOOK_OVERRIDE__UPDATE_SUBMODULES” 
#
#     Global Hook Override Files:
#     --------------------------
#         GLOBAL_HOOK_OVERRIDE__ALL                                              # to override all global hooks
#                                                                               
#         GLOBAL_HOOK_OVERRIDE__POST_CHECKOUT                                    # to override this entire file
#                                                                               
#         GLOBAL_HOOK_OVERRIDE__UPDATE_VERSION_REMINDER                          # to override the reminder popup on checkout of release branch with 0 commits



#####################################################
#
#     CONSTANTS
#
#####################################################

SILENT=false
TEMP_FILE_PATH="temp"
OG_REPO_PWD=$(pwd)

# Global Hook Override File Names
GHOFN__ALL="GLOBAL_HOOK_OVERRIDE__ALL"                                         # to override all global hooks
GHOFN__POST_CHECKOUT="GLOBAL_HOOK_OVERRIDE__POST_CHECKOUT"                     # to override this entire file
GHOFN__UPDATE_VERSION_REMINDER="GLOBAL_HOOK_OVERRIDE__UPDATE_VERSION_REMINDER" # to override the reminder popup on checkout of release branch with 0 commits




#####################################################
#
#     FUNCTION DEFINITIONS
#
#####################################################

# given a file name, returns T/F if it exists in:
#                                                  the root dir of the repo, 
#                                                  a dir named GLOBAL_HOOK_OVERRIDE_FILES in the root dir of the repo,
#                                                  the .git dir 
# $1 = file name to check
# 0 = true, 1 = false
function global_hook_override_file_exists(){
    if   test -f ".git/$1"                       ; then return 0 ;
    elif test -f "$1"                            ; then return 0 ;
    elif test -f "GLOBAL_HOOK_OVERRIDE_FILES/$1" ; then return 0 ;
    fi 
    
    return 1
}



# $1 = Global Hook Override File Name
# $2 = command
function if_override_file_not_exist_execute_cmd(){
    if ! global_hook_override_file_exists $1; then
        $2
    fi
}



# $1 = Global Hook Override File Name
# $2 = first command
# $3 = second command
function if_override_file_not_exist_and_length_of_output_of_first_cmd_0_execute_second_cmd(){
    if ! global_hook_override_file_exists $1; then
    
        cmd_output=$2
        # echo "cmd_output: $cmd_output"
        
        if [ ${#cmd_output} == 0 ]; then # if the length of $cmd_out == 0 
            $3
        fi    
    fi
}



# $1 = string to echo
function echo_if_not_silent(){
	if [ "$SILENT" = false ] ; then
		echo $1
	fi
}



# $1 = Global Hook Override File Name
# $2 = string to echo
function echo_if_not_silent_and_global_hook_override_file_not_exist(){
	if ! global_hook_override_file_exists $1; then
		echo_if_not_silent "$2"
	fi
}



# Root of repo == pwd
# Default branch == "develop" if develop branch exists, else "master"
# If repo contains any local feature branches that are set to track a deleted remote branch, delete them and pull latest changes to default branch
function delete_all_local_branches_tracking_deleted_remote_branches(){

	echo_if_not_silent "........Checking for local feature branches that track a deleted remote branch in repo at: $(pwd)..."
	
	deleted_remote_tracking_branch_out=`git branch -vv | grep ': gone]'`
	
	# if deleted_remote_tracking_branch_out is not empty, there is at least one branch in this repo that is tracking a deleted remote feature branch 
	if [ ${#deleted_remote_tracking_branch_out} != 0 ]; then 
		echo_if_not_silent "............Found at least one, deleting all..."
			
		# if you ever want to base logic off of if git flow has been initialized, use this:  dev_branch_check_out=`git config gitflow."branch".develop` # for telling if git flow has been initialized
		dev_branch_check_out=`git branch | grep 'develop'` # for telling if develop branch exists
		
		if [ ${#dev_branch_check_out} != 0 ]; then # length of $dev_branch_check_out == 0  ;   if develop branch exists
			echo_if_not_silent "................Develop branch exists, so checking out develop..."
			git checkout develop
		else
			echo_if_not_silent "................Develop branch does NOT exist so checking out master..."
			git checkout master
		fi
		
		# sets the tip of default branch (develop if using git flow) to head of branch that is about to be deleted if it is ahead - ie: if it is from a completed pull request
		echo_if_not_silent "................Running git pull..."
		git pull
		
		# deletes all local branches that are tracking deleted remote branches
		echo_if_not_silent "................Deleting local feature branches that track a deleted remote branch..."
		git branch -vv | grep ': gone]'| grep 'feature/' | grep -v "\*" | awk '{ print $1; }' | xargs -r git branch -d 
	fi
}



#####################################################
#
#     MAIN
#
#####################################################


if ! global_hook_override_file_exists $GHOFN__ALL  &&  ! global_hook_override_file_exists $GHOFN__POST_CHECKOUT ; then
	script_parent_dir_path="$(dirname "$(readlink -fm "$0")")"
	echo_if_not_silent "Executing post-checkout hook script located at: $(readlink -fm "$0")..."
	
	# ===================================
	#     Update Version Reminder
	# =================================== 	
    if ! global_hook_override_file_exists $GHOFN__UPDATE_VERSION_REMINDER; then	
	
		echo_if_not_silent "....Checking if a version update reminder popup is needed..."

		release_branch_check_out=`git branch --show-current | grep 'release/'` # for telling if the user currently has a release branch checked out

		if [ ${#release_branch_check_out} != 0 ]; then # length of $release_branch_check_out != 0  ; # if the user currently has a release branch checked out
			
			num_commits_on_this_branch=`git rev-list --count develop..HEAD`

			if [ $num_commits_on_this_branch == 0 ] ; then
				echo_if_not_silent "........Checked out a release branch with 0 commits, reminding user to update the version if needed, waiting for the user to press the OK button..."
				
				# for testing
				#python "$script_parent_dir_path//ver_num_reminder/ver_num_reminder.pyw"
				
				# for production
				"$script_parent_dir_path\ver_num_reminder\app\dist\ver_num_reminder\ver_num_reminder.exe"
			fi 
		fi
	fi
fi




