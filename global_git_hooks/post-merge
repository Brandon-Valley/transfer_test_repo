#!/bin/sh


# For support and/or issues, email brandon.a.valley@boeing.com


# To test in Windows:
# ==================
#     make sure the path to the dir that contains your .sh.exe file is in your environment variables
#  		   if you have already downloaded git, the default location should be:  C:\Users\<USER-NAME>\AppData\Local\Programs\Git\usr\bin\
#     cd into parent directory
#     type "bash" to enter bash console
#     type "./<script_name>"
#     type "exit" to exit bash console



# When / where is this script run:
# ===============================
# All hook scripts execute starting in the repo's root directory (in the same directory that contains .git)
#
# the post-merge hook runs after the user successfully executes a pull command, does not work for all pulls,
# for instance, pull --rebase will not trigger the post-merge hook
#
# The post-merge hook runs after a successful merge command. You can use it to restore data in the working tree
# that Git can’t track, such as permissions data. This hook can likewise validate the presence of files external
# to Git control that you may want copied in when the working tree changes.



# How to use Global Hook Override Files:
# =====================================
# If you are reading this, there is a good chance that you are trying to write a script to interact with Git or doing something weird
# and this hook is getting in the way. If that is the case, then fear not!  Each main function of this hook script can be individually
# overridden/disabled for any given repository.
#
# If there is a main function you would like to override, this can be done by creating
# a file with a particular name in a particular location.  All override file names and a description of what main function they will
# disable are listed below.  As for the location, there are a few options:
#
#     1.)  If you only want these global hook functions to be disabled for your local copy of the repository in question:
#
#                   Place the Global Hook Override File(s) in the .git directory.
#
#     2.)  If you would like to disable certain global hook functions for everyone’s copy of the repo once they pull, you can place the
#          Global Hook Override File(s) in either:
#
#	           a.)  The root directory of the repo (in the same directory that contains .git), or
#
#              b.)  A directory named “GLOBAL_HOOK_OVERRIDE_FILES” in the root directory of the repo, for if you have a few Global Hook
#                   Override Files and you don’t want to clutter up your repo’s root director
#
# Obviously, each main function of this file exists for a reason, so please don’t disable anything unless you know what you are doing,
# and please use the lowest level override possible.  For example, if all you want is to stop the repo’s submodules from automatically
# being updated each time you pull, instead of using "GLOBAL_HOOK_OVERRIDE__POST_MERGE” (which would override everything in this file),
# it would be better to use “GLOBAL_HOOK_OVERRIDE__UPDATE_SUBMODULES”
#
#     Global Hook Override Files:
#     --------------------------
#         GLOBAL_HOOK_OVERRIDE__ALL                                              # to override all global hooks
#
#         GLOBAL_HOOK_OVERRIDE__POST_MERGE                                       # to override this entire file
#
#         GLOBAL_HOOK_OVERRIDE__GITMODULES_EDIT                                  # to override all edits to the .gitmodules file
#
#         GLOBAL_HOOK_OVERRIDE__SUBMODULE_GITMODULES_SET_UPDATE                  # to override setting the .update of each submodule in .gitmodules
#
#         GLOBAL_HOOK_OVERRIDE__SUBMODULE_GITMODULES_SET_BRANCH__DEV_BRANCH      # to override setting the .branch of each submodule in .gitmodules when git flow has been initialized
#
#         GLOBAL_HOOK_OVERRIDE__SUBMODULE_GITMODULES_SET_BRANCH__NO_DEV_BRANCH   # to override setting the .branch of each submodule in .gitmodules when git flow has NOT been initialized
#
#         GLOBAL_HOOK_OVERRIDE__UPDATE_SUBMODULES                                # to override updating all submodules when users pulls
#
#		      GLOBAL_HOOK_OVERRIDE__DELETE_MERGED_FEATURE_BRANCHES                   # to override deleting all local feature branches that track a deleted remote branch



#####################################################
#
#     CONSTANTS
#
#####################################################

SILENT=false
TEMP_FILE_PATH="temp"
OG_REPO_PWD=$(pwd)

# Global Hook Override File Names
GHOFN__ALL="GLOBAL_HOOK_OVERRIDE__ALL"                                                                                       # to override all global hooks
GHOFN__POST_MERGE="GLOBAL_HOOK_OVERRIDE__POST_MERGE"                                                                         # to override this entire file
GHOFN__GITMODULES_EDIT="GLOBAL_HOOK_OVERRIDE__GITMODULES_EDIT"                                                               # to override all edits to the .gitmodules file
GHOFN__SUBMODULE_GITMODULES_SET_UPDATE="GLOBAL_HOOK_OVERRIDE__SUBMODULE_GITMODULES_SET_UPDATE"                               # to override setting the .update of each submodule in .gitmodules
GHOFN__SUBMODULE_GITMODULES_SET_BRANCH__DEV_BRANCH="GLOBAL_HOOK_OVERRIDE__SUBMODULE_GITMODULES_SET_BRANCH__DEV_BRANCH"       # to override setting the .branch of each submodule in .gitmodules when git flow has been initialized
GHOFN__SUBMODULE_GITMODULES_SET_BRANCH__NO_DEV_BRANCH="GLOBAL_HOOK_OVERRIDE__SUBMODULE_GITMODULES_SET_BRANCH__NO_DEV_BRANCH" # to override setting the .branch of each submodule in .gitmodules when git flow has NOT been initialized
GHOFN__UPDATE_SUBMODULES="GLOBAL_HOOK_OVERRIDE__UPDATE_SUBMODULES"                                                           # to override updating all submodules when users pulls
GHOFN__DELETE_MERGED_FEATURE_BRANCHES="GLOBAL_HOOK_OVERRIDE__DELETE_MERGED_FEATURE_BRANCHES"                                 # to override deleting all local feature branches that track a deleted remote branch



#####################################################
#
#     FUNCTION DEFINITIONS
#
#####################################################

# given a file name, returns T/F if it exists in:
#                                                  the root dir of the repo,
#                                                  a dir named GLOBAL_HOOK_OVERRIDE_FILES in the root dir of the repo,
#                                                  the .git dir
# $1 = file name to check
# 0 = true, 1 = false
function global_hook_override_file_exists(){
    if   test -f ".git/$1"                       ; then return 0 ;
    elif test -f "$1"                            ; then return 0 ;
    elif test -f "GLOBAL_HOOK_OVERRIDE_FILES/$1" ; then return 0 ;
    fi

    return 1
}



# $1 = Global Hook Override File Name
# $2 = command
function if_override_file_not_exist_execute_cmd(){
    if ! global_hook_override_file_exists $1; then
        $2
    fi
}



# $1 = Global Hook Override File Name
# $2 = first command
# $3 = second command
function if_override_file_not_exist_and_length_of_output_of_first_cmd_0_execute_second_cmd(){
    if ! global_hook_override_file_exists $1; then

        cmd_output=$2
        # echo "cmd_output: $cmd_output"

        if [ ${#cmd_output} == 0 ]; then # if the length of $cmd_out == 0
            $3
        fi
    fi
}



# $1 = string to echo
function echo_if_not_silent(){
	if [ "$SILENT" = false ] ; then
		echo $1
	fi
}



# $1 = Global Hook Override File Name
# $2 = string to echo
function echo_if_not_silent_and_global_hook_override_file_not_exist(){
	if ! global_hook_override_file_exists $1; then
		echo_if_not_silent "$2"
	fi
}



# Root of repo == pwd
# Default branch == "develop" if develop branch exists, else "master"
# If repo contains any local feature branches that are set to track a deleted remote branch, delete them and pull latest changes to default branch
function delete_all_local_branches_tracking_deleted_remote_branches(){

	echo_if_not_silent "........Checking for local feature branches that track a deleted remote branch in repo at: $(pwd)..."

	deleted_remote_tracking_branch_out=`git branch -vv | grep ': gone]'`

	# if deleted_remote_tracking_branch_out is not empty, there is at least one branch in this repo that is tracking a deleted remote feature branch
	if [ ${#deleted_remote_tracking_branch_out} != 0 ]; then
		echo_if_not_silent "............Found at least one, deleting all..."

		# if you ever want to base logic off of if git flow has been initialized, use this:  dev_branch_check_out=`git config gitflow."branch".develop` # for telling if git flow has been initialized
		dev_branch_check_out=`git branch | grep 'develop'` # for telling if develop branch exists

		if [ ${#dev_branch_check_out} != 0 ]; then # length of $dev_branch_check_out == 0  ;   if develop branch exists
			echo_if_not_silent "................Develop branch exists, so checking out develop..."
			git checkout develop
		else
			echo_if_not_silent "................Develop branch does NOT exist so checking out master..."
			git checkout master
		fi

		# sets the tip of default branch (develop if using git flow) to head of branch that is about to be deleted if it is ahead - ie: if it is from a completed pull request
		echo_if_not_silent "................Running git pull..."
		git pull

		# deletes all local branches that are tracking deleted remote branches
		echo_if_not_silent "................Deleting local feature branches that track a deleted remote branch..."
		git branch -vv | grep ': gone]'| grep 'feature/' | grep -v "\*" | awk '{ print $1; }' | xargs -r git branch -d
	fi
}



#####################################################
#
#     MAIN
#
#####################################################


if ! global_hook_override_file_exists $GHOFN__ALL  &&  ! global_hook_override_file_exists $GHOFN__POST_MERGE ; then
	script_parent_dir_path="$(dirname "$(readlink -fm "$0")")"
	echo_if_not_silent "Executing post-merge hook script located at: $(readlink -fm "$0")..."

	# read the relative paths to each submodule into an array: submodule_relative_paths_a
	git config --file .gitmodules --get-regexp path | awk '{ print $2 }' > $TEMP_FILE_PATH # write the output of the command to the temp file
	readarray -t submodule_relative_paths_a                              < $TEMP_FILE_PATH # read the contents of the temp file into an array (one element per line)
	rm                                                                     $TEMP_FILE_PATH # delete the temp file

    # ===================================
    #     .gitmodules Edit
    # ===================================
    if ! global_hook_override_file_exists $GHOFN__GITMODULES_EDIT; then

        for i in "${submodule_relative_paths_a[@]}" # for each submodule relative path in $submodule_relative_paths_a
        do
            echo_if_not_silent "....For submodule located at: $i:"

            # if override file does not exist, and if submodule's .update in .gitmodules is not set, set it to rebase
			echo_if_not_silent_and_global_hook_override_file_not_exist $GHOFN__SUBMODULE_GITMODULES_SET_UPDATE "........Setting .update to rebase..."
            if_override_file_not_exist_and_length_of_output_of_first_cmd_0_execute_second_cmd $GHOFN__SUBMODULE_GITMODULES_SET_UPDATE "git config -f .gitmodules submodule."$i".update" "git config -f .gitmodules submodule.$i.update rebase"

			cd "$OG_REPO_PWD/$i"

			# need to let the local repo know if any remote branches have been deleted
			echo_if_not_silent "........Updating .branch..."

			# if you ever want to base logic off of if git flow has been initialized, use this:  dev_branch_check_out=`git config gitflow."branch".develop` # for telling if git flow has been initialized
			dev_branch_check_out=`git branch | grep 'develop'` # for telling if develop branch exists

			if [ ${#dev_branch_check_out} != 0 ]; then # length of $dev_branch_check_out != 0  ;   if develop branch exists

				cd "$OG_REPO_PWD"

				# if override file does not exist, set submodule's .branch in .gitmodules to develop - not checking if set yet because this should be done if you have an existing repo, then do git flow --init
				echo_if_not_silent_and_global_hook_override_file_not_exist $GHOFN__SUBMODULE_GITMODULES_SET_BRANCH__DEV_BRANCH "............Develop branch exists, so setting .branch to develop..."
				if_override_file_not_exist_and_length_of_output_of_first_cmd_0_execute_second_cmd $GHOFN__SUBMODULE_GITMODULES_SET_BRANCH__DEV_BRANCH "git config -f .gitmodules submodule."$i".branch" "git config -f .gitmodules submodule.$i.branch develop"


			else # if develop branch does not exist

				# if override file does not exist, and if submodule's .branch in .gitmodules is not set, set it to master
				# this will run each time you add a new submodule because it is looking at the local copy of .gitmodules before the pull changes are applied
				# but this is fine because if the .branch has been set for this new submodule in the pull changes, they will override this change
				echo_if_not_silent_and_global_hook_override_file_not_exist $GHOFN__SUBMODULE_GITMODULES_SET_BRANCH__NO_DEV_BRANCH "............Develop branch does NOT exist, so setting .branch to master..."
				if_override_file_not_exist_and_length_of_output_of_first_cmd_0_execute_second_cmd $GHOFN__SUBMODULE_GITMODULES_SET_BRANCH__NO_DEV_BRANCH "git config -f .gitmodules submodule."$i".branch" "git config -f .gitmodules submodule.$i.branch master"
			fi

			cd "$OG_REPO_PWD/$i" # cd into submodule
        done
    fi


    # ===================================
    #     Update Submodules
    # ===================================
    # if override file does not exist, update all submodules
	echo_if_not_silent_and_global_hook_override_file_not_exist $GHOFN__UPDATE_SUBMODULES "....Updating submodules by running git submodule update --recursive --remote..."
    if_override_file_not_exist_execute_cmd $GHOFN__UPDATE_SUBMODULES "git submodule update --recursive --remote"


	  # ===================================
    #     Delete Merged Feature Branches
    # ===================================
	# normally while using git flow, when the user "finishes" a feature, they are prompted to delete the feature branch, but when the user merges their feature branch using a pull request,
	# they are prompted to delete their remote feature branch, but their local feature branch will still exist.  This can lead to confusion / committing to a local feature branch that
	# should have been deleted, so when the user pulls, if any local feature branches exist in the root repo or any of it's submodules without a corresponding remote branch, it is deleted
	if ! global_hook_override_file_exists $GHOFN__DELETE_MERGED_FEATURE_BRANCHES; then

		# delete merged feature branches in submodules
		for i in "${submodule_relative_paths_a[@]}" # for each submodule relative path in $submodule_relative_paths_a
		do
			echo_if_not_silent "....For submodule located at: $i:"

			cd "$OG_REPO_PWD/$i" # cd into submodule

			# fetch and delete_all_local_branches_tracking_deleted_remote_branches() takes a pretty long time, even if there is nothing to update, so only run if at least one local feature branch exists
			feat_branch_check_out=`git branch | grep 'feature/'` # for telling if feature branch exists

			if [ ${#feat_branch_check_out} != 0 ]; then # length of $feat_branch_check_out != 0  ; # if any branch with "feature/" in it's name exists

				# need to let the local repo know if any remote branches have been deleted
				echo_if_not_silent "........Running git fetch --prune..."
				git fetch --prune

				# If repo contains any local feature branches that are set to track a deleted remote branch, delete them and pull latest changes to default branch
				delete_all_local_branches_tracking_deleted_remote_branches

			else
				echo_if_not_silent "........No local feature branches exist in submodule, so not checking for deleted remote feature branches"
			fi
		done

		# delete merged feature branches in root repo
		cd "$OG_REPO_PWD"
		echo_if_not_silent "....For root repo located at: $(pwd):"
		delete_all_local_branches_tracking_deleted_remote_branches
	fi
fi
